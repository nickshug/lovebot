from datetime import datetime
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ ---
def get_send_time_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_now"),
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="send_later")
    )
    return builder.as_markup()


def get_date_selection_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –±—ã—Å—Ç—Ä–æ–π –¥–∞—Ç—ã.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="date_today"),
        InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="date_tomorrow")
    )
    return builder.as_markup()


def get_skip_attachment_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —à–∞–≥–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è", callback_data="skip_attachment")
    )
    return builder.as_markup()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
def get_events_period_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üóìÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="events_today"),
        InlineKeyboardButton(text="üóìÔ∏è –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="events_week")
    )
    builder.row(
        InlineKeyboardButton(text="üóìÔ∏è –ù–∞ –º–µ—Å—è—Ü", callback_data="events_month"),
        InlineKeyboardButton(text="üóìÔ∏è –í—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ", callback_data="events_all")
    )
    return builder.as_markup()


def get_skip_details_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_details"))
    return builder.as_markup()


def get_delete_event_kb(events: list, page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    EVENTS_PER_PAGE = 5
    start = page * EVENTS_PER_PAGE
    end = start + EVENTS_PER_PAGE

    for event in events[start:end]:
        event_datetime = datetime.fromisoformat(event['event_date'])
        event_str = event_datetime.strftime('%d.%m %H:%M')
        builder.row(InlineKeyboardButton(
            text=f"‚ùå {event_str} - {event['title'][:20]}",
            callback_data=f"del_event_{event['event_id']}"
        ))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"event_page_{page - 1}"))
    if end < len(events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"event_page_{page + 1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    return builder.as_markup()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
def get_settings_kb(settings: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()

    # –ë–ª–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
    reminders_status = f"–í–∫–ª—é—á–µ–Ω—ã (–≤ {settings['reminder_time']})" if settings['reminders_enabled'] else "–í—ã–∫–ª—é—á–µ–Ω—ã"
    builder.row(InlineKeyboardButton(text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö: {reminders_status}", callback_data="noop"))
    if settings['reminders_enabled']:
        builder.row(
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="settings_changetime"),
            InlineKeyboardButton(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="settings_disable")
        )
    else:
        builder.row(InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="settings_enable"))

    # –ë–ª–æ–∫ "–í–æ–ø—Ä–æ—Å –¥–Ω—è"
    qotd_status = f"–í–∫–ª—é—á–µ–Ω ({settings['qotd_send_time']} / {settings['qotd_summary_time']})" if settings[
        'qotd_enabled'] else "–í—ã–∫–ª—é—á–µ–Ω"
    builder.row(InlineKeyboardButton(text=f"–í–æ–ø—Ä–æ—Å –¥–Ω—è: {qotd_status}", callback_data="noop"))
    if settings['qotd_enabled']:
        builder.row(
            InlineKeyboardButton(text="‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è", callback_data="settings_qotd_changetime"),
            InlineKeyboardButton(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="settings_qotd_disable")
        )
    else:
        builder.row(InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="settings_qotd_enable"))

    return builder.as_markup()

def get_answer_qotd_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –í–æ–ø—Ä–æ—Å –î–Ω—è."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer_qotd"))
    return builder.as_markup()


def get_qotd_archive_kb(current_index: int, total_answers: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏–≤—É –æ—Ç–≤–µ—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()

    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"qotd_archive_{current_index - 1}"))

    nav_buttons.append(InlineKeyboardButton(text=f"{current_index + 1}/{total_answers}", callback_data="noop"))

    if current_index < total_answers - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"qotd_archive_{current_index + 1}"))

    builder.row(*nav_buttons)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∏—à–ª–∏—Å—Ç–∞ ---
def get_wishlist_choice_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞, —á–µ–π –≤–∏—à–ª–∏—Å—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üéÅ –ú–æ–π –≤–∏—à–ª–∏—Å—Ç", callback_data="wishlist_my"),
        InlineKeyboardButton(text="üíñ –í–∏—à–ª–∏—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞", callback_data="wishlist_partner")
    )
    return builder.as_markup()


def get_skip_photo_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –≤–∏—à–ª–∏—Å—Ç."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo"))
    return builder.as_markup()


def get_skip_link_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –≤–∏—à–ª–∏—Å—Ç."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_link"))
    return builder.as_markup()


def get_memory_view_kb(current_index: int, total_memories: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º."""
    builder = InlineKeyboardBuilder()

    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"memory_view_{current_index - 1}"))

    nav_buttons.append(InlineKeyboardButton(text=f"{current_index + 1}/{total_memories}", callback_data="noop"))

    if current_index < total_memories - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"memory_view_{current_index + 1}"))

    builder.row(*nav_buttons)
    return builder.as_markup()


def get_movie_genre_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ —Ñ–∏–ª—å–º–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üé≠ –ö–æ–º–µ–¥–∏—è", callback_data="movie_genre_comedy"),
        InlineKeyboardButton(text="üíñ –†–æ–º–∞–Ω—Ç–∏–∫–∞", callback_data="movie_genre_romance")
    )
    builder.row(
        InlineKeyboardButton(text="üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="movie_genre_scifi"),
        InlineKeyboardButton(text="‚ùì –¢—Ä–∏–ª–ª–µ—Ä", callback_data="movie_genre_thriller")
    )
    return builder.as_markup()


def get_movie_suggestion_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üé≤ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="movie_another"),
        InlineKeyboardButton(text="‚ûï –í —Å–ø–∏—Å–æ–∫", callback_data="movie_add_watchlist")
    )
    builder.row(InlineKeyboardButton(text="‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Å–º–æ—Ç—Ä–∏–º!", callback_data="movie_lets_watch"))
    return builder.as_markup()


def get_delete_movie_kb(movies: list, page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    MOVIES_PER_PAGE = 5
    start = page * MOVIES_PER_PAGE
    end = start + MOVIES_PER_PAGE

    for movie in movies[start:end]:
        builder.row(InlineKeyboardButton(
            text=f"‚ùå {movie['title'][:30]}",
            callback_data=f"del_movie_{movie['id']}"
        ))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"movie_page_{page - 1}"))
    if end < len(movies):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"movie_page_{page + 1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    return builder.as_markup()


def get_date_ideas_kb(ideas: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-—á–µ–∫–ª–∏—Å—Ç –¥–ª—è –∏–¥–µ–π —Å–≤–∏–¥–∞–Ω–∏–π."""
    builder = InlineKeyboardBuilder()
    for idea in ideas:
        status_icon = "‚úÖ" if idea['is_completed'] else "‚¨úÔ∏è"
        builder.row(InlineKeyboardButton(
            text=f"{status_icon} {idea['idea_text']}",
            callback_data=f"toggle_idea_{idea['id']}"
        ))
    return builder.as_markup()


def get_delete_date_idea_kb(ideas: list, page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–¥–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    IDEAS_PER_PAGE = 5
    start = page * IDEAS_PER_PAGE
    end = start + IDEAS_PER_PAGE

    for idea in ideas[start:end]:
        builder.row(InlineKeyboardButton(
            text=f"‚ùå {idea['idea_text'][:30]}",
            callback_data=f"del_idea_{idea['id']}"
        ))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"idea_page_{page - 1}"))
    if end < len(ideas):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"idea_page_{page + 1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    return builder.as_markup()

def get_confirm_unlink_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–∞ —Å–≤—è–∑–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üíî –î–∞, —Ä–∞–∑–æ—Ä–≤–∞—Ç—å", callback_data="confirm_unlink"),
        InlineKeyboardButton(text="‚ù§Ô∏è –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_unlink")
    )
    return builder.as_markup()