import logging
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time, timedelta
import pytz

from src.db import database as db
from src.keyboards.inline import get_answer_qotd_kb


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---

async def check_and_send_compliments(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã."""
    compliments = await db.get_due_compliments()
    if not compliments: return

    logging.info(f"Scheduler: –ù–∞–π–¥–µ–Ω–æ {len(compliments)} –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    for compliment in compliments:
        try:
            from_user = await db.get_user(compliment['sender_id'])
            from_user_name = from_user['username'] if from_user else "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä"

            full_message = f"üíå –í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç {from_user_name}:\n\n‚ú® ¬´{compliment['text']}¬ª ‚ú®"

            if compliment['attachment_file_id']:
                attachment_type = compliment['attachment_type']
                file_id = compliment['attachment_file_id']
                caption = compliment['caption']

                await bot.send_message(chat_id=compliment['receiver_id'], text=full_message)

                if attachment_type == 'photo':
                    await bot.send_photo(chat_id=compliment['receiver_id'], photo=file_id, caption=caption)
                elif attachment_type == 'video':
                    await bot.send_video(chat_id=compliment['receiver_id'], video=file_id, caption=caption)
                elif attachment_type == 'voice':
                    await bot.send_voice(chat_id=compliment['receiver_id'], voice=file_id, caption=caption)
                elif attachment_type == 'video_note':
                    await bot.send_video_note(chat_id=compliment['receiver_id'], video_note=file_id)
            else:
                await bot.send_message(chat_id=compliment['receiver_id'], text=full_message)

            await db.delete_compliment(compliment['id'])
            logging.info(f"Scheduler: –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç {compliment['id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç {compliment['id']}: {e}")


async def master_scheduler_task(bot: Bot):
    """–ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏."""
    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)
    current_time_str = now.strftime("%H:%M")

    all_couples = await db.get_all_couples_with_settings()

    for couple in all_couples:
        # --- 1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö ---
        if couple['reminders_enabled'] and couple['reminder_time'] == current_time_str:
            await send_event_reminders_for_couple(bot, couple, now)

        # --- 2. –í–æ–ø—Ä–æ—Å –¥–Ω—è ---
        if couple['qotd_enabled']:
            # 2a. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
            if couple['qotd_send_time'] == current_time_str:
                await send_qotd_to_couple(bot, couple)

            # 2b. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –∏—Ç–æ–≥–∏
            summary_time = datetime.strptime(couple['qotd_summary_time'], "%H:%M").time()
            reminder_time = (datetime.combine(now.date(), summary_time) - timedelta(hours=1)).time()

            if reminder_time.strftime("%H:%M") == current_time_str:
                await send_qotd_reminder_to_couple(bot, couple)

            if couple['qotd_summary_time'] == current_time_str:
                await send_qotd_summary_to_couple(bot, couple)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è master_scheduler_task ---

async def send_event_reminders_for_couple(bot: Bot, couple: dict, now: datetime):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã."""
    couple_id = couple['couple_id']
    today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
    today_end = now.replace(hour=23, minute=59, second=59, microsecond=999999)
    events = await db.get_events_for_period(couple_id, today_start, today_end)
    if not events: return

    response_text = "<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
    for event in events:
        event_datetime = datetime.fromisoformat(event['event_date'])
        time_str = event_datetime.strftime("%H:%M")
        response_text += f"‚Ä¢ <b>{time_str}</b> - {event['title']} üóìÔ∏è\n"
    response_text += "\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ù§Ô∏è"

    try:
        await bot.send_message(couple['user1_id'], response_text)
        await bot.send_message(couple['user2_id'], response_text)
        logging.info(f"Scheduler: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä–µ {couple_id}")
    except Exception as e:
        logging.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–∞—Ä–µ {couple_id}: {e}")


async def send_qotd_to_couple(bot: Bot, couple: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–Ω—è –æ–¥–Ω–æ–π –ø–∞—Ä–µ."""
    question = await db.get_random_question()
    if not question: return

    await db.create_daily_question_entry(couple['couple_id'], question['question_id'], couple['user1_id'],
                                         couple['user2_id'])

    text = f"<b>‚ùì –í–æ–ø—Ä–æ—Å –¥–Ω—è –¥–ª—è –≤–∞—Å –¥–≤–æ–∏—Ö:</b>\n\n{question['text']}"
    try:
        await bot.send_message(couple['user1_id'], text, reply_markup=get_answer_qotd_kb())
        await bot.send_message(couple['user2_id'], text, reply_markup=get_answer_qotd_kb())
        logging.info(f"Scheduler: –í–æ–ø—Ä–æ—Å –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä–µ {couple['couple_id']}")
    except Exception as e:
        logging.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–Ω—è –ø–∞—Ä–µ {couple['couple_id']}: {e}")


async def send_qotd_reminder_to_couple(bot: Bot, couple: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è."""
    answers = await db.get_today_question_for_couple(couple['couple_id'])
    if not answers or (answers['answer_user1'] and answers['answer_user2']): return

    reminder_text = "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è. –ú—ã –∂–¥–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—Å! üòâ"
    try:
        if not answers['answer_user1']:
            await bot.send_message(answers['user1_id'], reminder_text)
        if not answers['answer_user2']:
            await bot.send_message(answers['user2_id'], reminder_text)
        logging.info(f"Scheduler: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–ø—Ä–æ—Å–µ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä–µ {couple['couple_id']}")
    except Exception as e:
        logging.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–ø—Ä–æ—Å–µ –¥–Ω—è –ø–∞—Ä–µ {couple['couple_id']}: {e}")


async def send_qotd_summary_to_couple(bot: Bot, couple: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏."""
    answers = await db.get_today_question_for_couple(couple['couple_id'])
    if not answers: return

    user1_answer = answers['answer_user1'] or "<i>(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)</i>"
    user2_answer = answers['answer_user2'] or "<i>(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)</i>"

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user1 = await db.get_user(answers['user1_id'])
    user2 = await db.get_user(answers['user2_id'])
    user1_name = user1['username'] if user1 else "–ü–∞—Ä—Ç–Ω–µ—Ä 1"
    user2_name = user2['username'] if user2 else "–ü–∞—Ä—Ç–Ω–µ—Ä 2"

    summary_text = (
        f"<b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è:</b>\n"
        f"<i>{answers['question_text']}</i>\n\n"
        f"<b>–û—Ç–≤–µ—Ç {user1_name}:</b>\n{user1_answer}\n\n"
        f"<b>–û—Ç–≤–µ—Ç {user2_name}:</b>\n{user2_answer}"
    )

    try:
        await bot.send_message(answers['user1_id'], summary_text)
        await bot.send_message(answers['user2_id'], summary_text)
        logging.info(f"Scheduler: –ò—Ç–æ–≥–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–µ {couple['couple_id']}")
    except Exception as e:
        logging.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–Ω—è –ø–∞—Ä–µ {couple['couple_id']}: {e}")


def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á."""
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(check_and_send_compliments, 'interval', minutes=1, args=(bot,))
    scheduler.add_job(master_scheduler_task, 'interval', minutes=1, args=(bot,))
    return scheduler
