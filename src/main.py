import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand

from src.config import BOT_TOKEN
from src.db import database as db
from src.handlers import common, pairing, actions, calendar, settings, wishlist, qotd, memories, movies, dates
from src.utils.scheduler import setup_scheduler

async def set_main_menu(bot: Bot):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞.
    """
    main_menu_commands = [
        BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="/settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã"),

        BotCommand(command="/compliment", description="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç"),

        BotCommand(command="/addevent", description="üóìÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"),
        BotCommand(command="/events", description="üóìÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è"),
        BotCommand(command="/delevent", description="üóìÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),

        BotCommand(command="/addwish", description="üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ –≤ –≤–∏—à–ª–∏—Å—Ç"),
        BotCommand(command="/wishlist", description="üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏—à–ª–∏—Å—Ç—ã"),
        BotCommand(command="/delwish", description="üéÅ –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ"),

        BotCommand(command="/addquestion", description="‚ùì –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –í–æ–ø—Ä–æ—Å –¥–Ω—è"),
        BotCommand(command="/answers", description="‚ùì –ê—Ä—Ö–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤"),

        BotCommand(command="/addmemory", description="üì∏ –î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="/memory", description="üì∏ –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="/allmemories", description="üì∏ –í—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"),

        # BotCommand(command="/movie", description="üé¨ –ö–∏–Ω–æ—Ä—É–ª–µ—Ç–∫–∞"),
        BotCommand(command="/addmovie", description="üé¨ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫"),
        BotCommand(command="/watchlist", description="üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"),
        BotCommand(command="/delmovie", description="üé¨ –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞"),

        BotCommand(command="/add_date_idea", description="üíñ –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è"),
        BotCommand(command="/date_ideas", description="üíñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–¥–µ–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π"),
        BotCommand(command="/del_date_idea", description="üíñ –£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é")
    ]
    await bot.set_my_commands(main_menu_commands)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    logging.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")

    await db.db_start()
    await db.add_questions_to_db()

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=MemoryStorage())

    scheduler = setup_scheduler(bot)
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(common.router)
    dp.include_router(pairing.router)
    dp.include_router(actions.router)
    dp.include_router(calendar.router)
    dp.include_router(settings.router)
    dp.include_router(wishlist.router)
    dp.include_router(qotd.router)
    dp.include_router(memories.router)
    dp.include_router(movies.router)
    dp.include_router(dates.router)

    # --- –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ú–ï–ù–Æ –ö–û–ú–ê–ù–î ---
    await set_main_menu(bot)

    await bot.delete_webhook(drop_pending_updates=True)

    try:
        await dp.start_polling(bot)
    finally:
        scheduler.shutdown()
        await bot.session.close()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
