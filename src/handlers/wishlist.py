import logging
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.db import database as db
from src.states.user_states import Wishlist
from src.keyboards.inline import get_wishlist_choice_kb, get_skip_photo_kb, get_skip_link_kb

router = Router()
WISHES_PER_PAGE = 5


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è ---

@router.message(Command("addwish"))
async def cmd_addwish(message: types.Message, state: FSMContext):
    await state.clear()
    user_data = await db.get_user(message.from_user.id)
    if not user_data or not user_data['partner_id']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")
        return

    await state.set_state(Wishlist.waiting_for_title)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π –≤–∏—à–ª–∏—Å—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë–∏–ª–µ—Ç –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç')")


@router.message(Wishlist.waiting_for_title, F.text)
async def process_wish_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(Wishlist.waiting_for_link)
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                         reply_markup=get_skip_link_kb())


@router.message(Wishlist.waiting_for_link, F.text)
async def process_wish_link(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(Wishlist.waiting_for_photo)
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                         reply_markup=get_skip_photo_kb())


@router.callback_query(Wishlist.waiting_for_link, F.data == "skip_link")
async def process_skip_link(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Wishlist.waiting_for_photo)
    await callback.message.edit_text("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                                     reply_markup=get_skip_photo_kb())


async def finalize_wish_creation(user_id: int, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    await db.add_wish(
        user_id=user_id,
        title=data['title'],
        link=data.get('link'),
        photo_file_id=data.get('photo_file_id')
    )


@router.message(Wishlist.waiting_for_photo, F.photo)
async def process_wish_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_file_id=message.photo[-1].file_id)
    await finalize_wish_creation(message.from_user.id, state)
    await message.answer("‚úÖ –ñ–µ–ª–∞–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç!")


@router.callback_query(Wishlist.waiting_for_photo, F.data == "skip_photo")
async def process_skip_photo(callback: types.CallbackQuery, state: FSMContext):
    await finalize_wish_creation(callback.from_user.id, state)
    await callback.message.edit_text("‚úÖ –ñ–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç!")


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏—à–ª–∏—Å—Ç–æ–≤ ---

@router.message(Command("wishlist"))
async def cmd_wishlist(message: types.Message, state: FSMContext):
    await state.clear()
    user_data = await db.get_user(message.from_user.id)
    if not user_data or not user_data['partner_id']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")
        return
    await message.answer("–ß–µ–π –≤–∏—à–ª–∏—Å—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=get_wishlist_choice_kb())


async def format_wishlist_text_and_kb(wishes: list, owner_name: str, is_partner: bool, viewer_id: int):
    if not wishes:
        return f"–í–∏—à–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner_name} –ø–æ–∫–∞ –ø—É—Å—Ç.", None

    text = f"<b>–í–∏—à–ª–∏—Å—Ç {owner_name}:</b>\n\n"
    builder = InlineKeyboardBuilder()

    for i, wish in enumerate(wishes, 1):
        text += f"<b>{i}. {wish['title']}</b>\n"
        if wish['link']:
            text += f"   <a href='{wish['link']}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n"
        if wish['photo_file_id']:
            text += f"   <i>(–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ)</i>\n"

        if is_partner:
            if not wish['booked_by_id']:
                builder.row(InlineKeyboardButton(text=f"ü§´ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å '{wish['title'][:20]}'",
                                                 callback_data=f"book_wish_{wish['wish_id']}"))
            elif wish['booked_by_id'] == viewer_id:
                builder.row(InlineKeyboardButton(text=f"üéÅ –£–∂–µ –≤ –ø–ª–∞–Ω–∞—Ö! (—Å–Ω—è—Ç—å –±—Ä–æ–Ω—å)",
                                                 callback_data=f"unbook_wish_{wish['wish_id']}"))
            else:
                builder.row(InlineKeyboardButton(text=f" –∫–µ–º-—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ ", callback_data="noop"))
        text += "\n"

    return text, builder.as_markup() if is_partner else None


async def show_partner_wishlist(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    partner = await db.get_partner(user_id)
    wishes = await db.get_wishes(partner['user_id'])
    text, keyboard = await format_wishlist_text_and_kb(wishes, partner['username'], is_partner=True, viewer_id=user_id)
    await callback.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)


@router.callback_query(F.data.startswith("wishlist_"))
async def process_wishlist_choice(callback: types.CallbackQuery):
    choice = callback.data.split("_")[1]
    user_id = callback.from_user.id

    if choice == "my":
        wishes = await db.get_wishes(user_id)
        text, _ = await format_wishlist_text_and_kb(wishes, "–≤–∞—Å", is_partner=False, viewer_id=user_id)
        await callback.message.edit_text(text, disable_web_page_preview=True)

    elif choice == "partner":
        await show_partner_wishlist(callback)


@router.callback_query(F.data.startswith("book_wish_"))
async def process_book_wish(callback: types.CallbackQuery):
    wish_id = int(callback.data.split("_")[-1])
    await db.book_wish(wish_id, callback.from_user.id)
    await callback.answer("–í—ã —Ç–∞–π–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ –∂–µ–ª–∞–Ω–∏–µ! ü§´")
    await show_partner_wishlist(callback)


@router.callback_query(F.data.startswith("unbook_wish_"))
async def process_unbook_wish(callback: types.CallbackQuery):
    wish_id = int(callback.data.split("_")[-1])
    await db.unbook_wish(wish_id)
    await callback.answer("–ë—Ä–æ–Ω—å —Å–Ω—è—Ç–∞.")
    await show_partner_wishlist(callback)


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è ---

def get_delete_wish_kb(wishes: list, page: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    start = page * WISHES_PER_PAGE
    end = start + WISHES_PER_PAGE

    for wish in wishes[start:end]:
        builder.row(InlineKeyboardButton(text=f"‚ùå {wish['title'][:30]}", callback_data=f"del_wish_{wish['wish_id']}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wish_page_{page - 1}"))
    if end < len(wishes):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"wish_page_{page + 1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    return builder.as_markup()


@router.message(Command("delwish"))
async def cmd_delwish(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    wishes = await db.get_wishes(user_id)

    if not wishes:
        await message.answer("–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return

    await message.answer(
        "–ö–∞–∫–æ–µ –∂–µ–ª–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
        reply_markup=get_delete_wish_kb(wishes)
    )


@router.callback_query(F.data.startswith("del_wish_"))
async def process_del_wish(callback: types.CallbackQuery):
    wish_id = int(callback.data.split("_")[-1])
    wish = await db.get_wish_by_id(wish_id)
    await db.delete_wish_by_id(wish_id, callback.from_user.id)
    await callback.message.edit_text(f"‚úÖ –ñ–µ–ª–∞–Ω–∏–µ '{wish['title']}' —É–¥–∞–ª–µ–Ω–æ.")


@router.callback_query(F.data.startswith("wish_page_"))
async def process_wish_page(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[-1])
    wishes = await db.get_wishes(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=get_delete_wish_kb(wishes, page))
