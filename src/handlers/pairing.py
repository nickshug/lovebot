import logging
from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter

from src.db import database as db
from src.keyboards.inline import get_confirm_unlink_kb

router = Router()


@router.message(Command("code"))
async def cmd_code(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /code.
    –í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)

    if user_data and user_data['partner_id']:
        await message.answer("–í—ã —É–∂–µ –≤ –ø–∞—Ä–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–∞. ‚ù§Ô∏è")
        return

    invite_code = user_id

    text = (
        "<b>–í–æ—Ç –≤–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤–∞—à–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ. "
        "–ü–∞—Ä—Ç–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –º–Ω–µ –≤ —á–∞—Ç."
    )

    await message.answer(text)
    await message.answer(f"<code>{invite_code}</code>")


@router.message(F.text.isdigit(), StateFilter(None))
async def handle_invite_code(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ).
    """
    try:
        inviter_id = int(message.text)
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name

        # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω
        if inviter_id == user_id:
            await message.answer("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π! üòâ")
            return

        current_user_data = await db.get_user(user_id)
        if current_user_data and current_user_data['partner_id']:
            await message.answer(
                "–í—ã —É–∂–µ –≤ –ø–∞—Ä–µ. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–æ—Ä–≤–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–≤—è–∑—å –∫–æ–º–∞–Ω–¥–æ–π /unlink.")
            return

        inviter_data = await db.get_user(inviter_id)
        if not inviter_data:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ {inviter_id}")
            return
        if inviter_data['partner_id']:
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø–∞—Ä–µ.")
            return

        await db.link_partners(inviter_id, user_id)

        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ç–µ–ø–µ—Ä—å –≤ –ø–∞—Ä–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {inviter_data['username']}! ‚ù§Ô∏è")
        try:
            await message.bot.send_message(
                chat_id=inviter_id,
                text=f"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –í—ã —Ç–µ–ø–µ—Ä—å –≤ –ø–∞—Ä–µ! ‚ù§Ô∏è"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {inviter_id}: {e}")

    except (ValueError, TypeError):
        pass


@router.message(Command("unlink"))
async def cmd_unlink(message: types.Message):
    """
    –®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä—ã–≤ —Å–≤—è–∑–∏.
    """
    user_data = await db.get_user(message.from_user.id)

    if not user_data or not user_data['partner_id']:
        await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –≤ –ø–∞—Ä–µ.")
        return

    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Å–≤—è–∑—å –≤ –±–æ—Ç–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_unlink_kb()
    )


@router.callback_query(F.data == "confirm_unlink")
async def process_confirm_unlink(callback: types.CallbackQuery):
    """
    –®–∞–≥ 2 (–í–∞—Ä–∏–∞–Ω—Ç –ê): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞–∑—Ä—ã–≤.
    """
    user_id = callback.from_user.id
    user_data = await db.get_user(user_id)
    if not user_data or not user_data['partner_id']:
        await callback.message.edit_text("–í—ã —É–∂–µ –Ω–µ –≤ –ø–∞—Ä–µ.")
        return

    partner_id = user_data['partner_id']

    await db.unlink_partners(user_id)
    await callback.message.edit_text("–°–≤—è–∑—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞.")

    try:
        if partner_id != user_id:
            await callback.bot.send_message(
                chat_id=partner_id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.first_name} —Ä–∞–∑–æ—Ä–≤–∞–ª(–∞) —Å –≤–∞–º–∏ –ø–∞—Ä—É –≤ –±–æ—Ç–µ."
            )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {partner_id} –æ —Ä–∞–∑—Ä—ã–≤–µ: {e}")


@router.callback_query(F.data == "cancel_unlink")
async def process_cancel_unlink(callback: types.CallbackQuery):
    """
    –®–∞–≥ 2 (–í–∞—Ä–∏–∞–Ω—Ç –ë): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.
    """
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –ø–∞—Ä–µ. ‚ù§Ô∏è")
