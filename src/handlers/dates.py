from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.db import database as db
from src.states.user_states import DateIdea
from src.keyboards.inline import get_date_ideas_kb, get_delete_date_idea_kb

router = Router()


async def get_couple_id(user_id: int):
    partner = await db.get_partner(user_id)
    return min(user_id, partner['user_id']) if partner else None


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ–∏ ---
@router.message(Command("add_date_idea"))
async def cmd_add_date_idea(message: types.Message, state: FSMContext):
    await state.clear()
    if not await get_couple_id(message.from_user.id):
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")

    await state.set_state(DateIdea.waiting_for_idea_text)
    await message.answer("–ö–∞–∫—É—é –∏–¥–µ—é –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞—à –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫?")


@router.message(DateIdea.waiting_for_idea_text, F.text)
async def process_new_date_idea(message: types.Message, state: FSMContext):
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    success = await db.add_date_idea(couple_id, message.text)

    if success:
        await message.answer(f"‚úÖ –ò–¥–µ—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!")
    else:
        await message.answer("–¢–∞–∫–∞—è –∏–¥–µ—è —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
@router.message(Command("date_ideas"))
async def cmd_date_ideas(message: types.Message, state: FSMContext):
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    if not couple_id:
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")

    ideas = await db.get_date_ideas(couple_id)
    if not ideas:
        return await message.answer(
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–æ–º–∞–Ω–¥–æ–π /add_date_idea.")

    await message.answer(
        "<b>üíñ –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π:</b>\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–¥–µ–∏, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∏—Ö –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.",
        reply_markup=get_date_ideas_kb(ideas)
    )


@router.callback_query(F.data.startswith("toggle_idea_"))
async def process_toggle_idea(callback: types.CallbackQuery):
    idea_id = int(callback.data.split("_")[-1])
    couple_id = await get_couple_id(callback.from_user.id)

    await db.toggle_date_idea_status(idea_id, couple_id)
    await callback.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    ideas = await db.get_date_ideas(couple_id)
    await callback.message.edit_reply_markup(reply_markup=get_date_ideas_kb(ideas))


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏–¥–µ–∏ ---
@router.message(Command("del_date_idea"))
async def cmd_del_date_idea(message: types.Message, state: FSMContext):
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    if not couple_id:
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")

    ideas = await db.get_date_ideas(couple_id)
    if not ideas:
        return await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")

    await message.answer(
        "–ö–∞–∫—É—é –∏–¥–µ—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞?",
        reply_markup=get_delete_date_idea_kb(ideas)
    )


@router.callback_query(F.data.startswith("del_idea_"))
async def process_del_idea(callback: types.CallbackQuery):
    idea_id = int(callback.data.split("_")[-1])
    couple_id = await get_couple_id(callback.from_user.id)

    await db.delete_date_idea(idea_id, couple_id)
    await callback.answer("–ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

    ideas = await db.get_date_ideas(couple_id)
    if not ideas:
        await callback.message.edit_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.")
    else:
        await callback.message.edit_text(
            "–ö–∞–∫—É—é –∏–¥–µ—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞?",
            reply_markup=get_delete_date_idea_kb(ideas)
        )


@router.callback_query(F.data.startswith("idea_page_"))
async def process_idea_page(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[-1])
    couple_id = await get_couple_id(callback.from_user.id)
    ideas = await db.get_date_ideas(couple_id)
    await callback.message.edit_reply_markup(reply_markup=get_delete_date_idea_kb(ideas, page))
