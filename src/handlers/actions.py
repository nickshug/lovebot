import logging
from datetime import datetime, timedelta
import pytz
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.db import database as db
from src.states.user_states import Actions
from src.keyboards.inline import get_send_time_kb, get_skip_attachment_kb, get_date_selection_kb

router = Router()


@router.message(Command("compliment"))
async def cmd_compliment(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.
    """
    user_data = await db.get_user(message.from_user.id)
    if not user_data or not user_data['partner_id']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")
        return
    await state.set_state(Actions.waiting_for_compliment_text)
    await message.answer("–ö–∞–∫–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—É? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç.")


@router.message(Actions.waiting_for_compliment_text)
async def process_compliment_text(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ.
    """
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    await state.update_data(compliment_text=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è.",
        reply_markup=get_skip_attachment_kb())
    await state.set_state(Actions.waiting_for_attachment)


@router.message(Actions.waiting_for_attachment, F.photo | F.video | F.voice | F.video_note)
async def process_attachment(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 3 (–í–∞—Ä–∏–∞–Ω—Ç –ê): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–ª–æ–∂–µ–Ω–∏–µ. –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    attachment_info = {}
    if message.photo:
        attachment_info['type'] = 'photo'
        attachment_info['file_id'] = message.photo[-1].file_id
    elif message.video:
        attachment_info['type'] = 'video'
        attachment_info['file_id'] = message.video.file_id
    elif message.voice:
        attachment_info['type'] = 'voice'
        attachment_info['file_id'] = message.voice.file_id
    elif message.video_note:
        attachment_info['type'] = 'video_note'
        attachment_info['file_id'] = message.video_note.file_id

    attachment_info['caption'] = message.caption
    await state.update_data(attachment_info=attachment_info)

    await message.answer("–í–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç?", reply_markup=get_send_time_kb())
    await state.set_state(Actions.waiting_for_send_time_choice)


@router.callback_query(Actions.waiting_for_attachment, F.data == "skip_attachment")
async def process_skip_attachment(callback: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 3 (–í–∞—Ä–∏–∞–Ω—Ç –ë): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–ª–æ–∂–µ–Ω–∏–µ. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ. –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç?", reply_markup=get_send_time_kb())
    await state.set_state(Actions.waiting_for_send_time_choice)


@router.callback_query(Actions.waiting_for_send_time_choice, F.data == "send_now")
async def process_send_now(callback: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 4 (–í–∞—Ä–∏–∞–Ω—Ç –ê): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å". –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.
    """
    await callback.message.delete()
    await finalize_compliment(callback.from_user.id, callback.bot, state)


@router.callback_query(Actions.waiting_for_send_time_choice, F.data == "send_later")
async def process_send_later(callback: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 4 (–í–∞—Ä–∏–∞–Ω—Ç –ë): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ". –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å/–≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É.
    """
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é.\n\n"
        "–§–æ—Ä–º–∞—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2024).",
        reply_markup=get_date_selection_kb()
    )
    await state.set_state(Actions.waiting_for_send_date)


@router.callback_query(Actions.waiting_for_send_date, F.data.startswith("date_"))
async def process_date_button(callback: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 5 (–í–∞—Ä–∏–∞–Ω—Ç –ê): –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ "–°–µ–≥–æ–¥–Ω—è" / "–ó–∞–≤—Ç—Ä–∞".
    """
    await callback.answer()
    date_choice = callback.data.split("_")[1]
    send_date = None
    if date_choice == "today":
        send_date = datetime.now().date()
    elif date_choice == "tomorrow":
        send_date = (datetime.now() + timedelta(days=1)).date()
    await state.update_data(send_date=send_date)
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30 –∏–ª–∏ 18:00).")
    await state.set_state(Actions.waiting_for_send_time)


@router.message(Actions.waiting_for_send_date, F.text)
async def process_date_text_input(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 5 (–í–∞—Ä–∏–∞–Ω—Ç –ë): –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É, –≤–≤–µ–¥–µ–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é.
    """
    try:
        send_date = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö.")
        return
    if send_date < datetime.now().date():
        await message.answer("–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∏–ª–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É.")
        return
    await state.update_data(send_date=send_date)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30 –∏–ª–∏ 18:00).")
    await state.set_state(Actions.waiting_for_send_time)


@router.message(Actions.waiting_for_send_time, F.text)
async def process_send_time(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 6: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
    """
    try:
        user_time = datetime.strptime(message.text, "%H:%M").time()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        return
    user_data = await state.get_data()
    naive_send_datetime = datetime.combine(user_data['send_date'], user_time)
    moscow_tz = pytz.timezone("Europe/Moscow")
    aware_send_datetime = moscow_tz.localize(naive_send_datetime)
    if aware_send_datetime < datetime.now(moscow_tz):
        await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
        return
    await state.update_data(send_datetime=aware_send_datetime)
    await finalize_compliment(message.from_user.id, message.bot, state)


async def finalize_compliment(user_id: int, bot: Bot, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    sender = await db.get_user(user_id)
    partner = await db.get_partner(user_id)
    if not partner or not sender:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –¥–ª—è user_id: {user_id} –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞.")
        try:
            await bot.send_message(user_id,
                                   "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return

    text = data.get('compliment_text')
    from_user_name = sender['username'] or '–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä'
    full_message = f"üíå –í–∞–º –ø—Ä–∏—à–µ–ª –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç {from_user_name}:\n\n‚ú® ¬´{text}¬ª ‚ú®"

    attachment_info = data.get('attachment_info')
    caption = attachment_info.get('caption') if attachment_info else None
    file_id = attachment_info.get('file_id') if attachment_info else None
    attachment_type = attachment_info.get('type') if attachment_info else None

    if 'send_datetime' not in data:
        try:
            await bot.send_message(chat_id=partner['user_id'], text=full_message)
            if file_id:
                if attachment_type == 'photo':
                    await bot.send_photo(chat_id=partner['user_id'], photo=file_id, caption=caption)
                elif attachment_type == 'video':
                    await bot.send_video(chat_id=partner['user_id'], video=file_id, caption=caption)
                elif attachment_type == 'voice':
                    await bot.send_voice(chat_id=partner['user_id'], voice=file_id, caption=caption)
                elif attachment_type == 'video_note':
                    await bot.send_video_note(chat_id=partner['user_id'], video_note=file_id)
            await bot.send_message(user_id, "–í–∞—à –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üíñ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞: {e}")
            await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç.")
    else:
        send_datetime = data['send_datetime']
        send_time_str = send_datetime.strftime('%d.%m.%Y –≤ %H:%M')
        send_at_iso = send_datetime.isoformat()
        await db.add_scheduled_compliment(
            sender_id=user_id,
            receiver_id=partner['user_id'],
            text=text,
            caption=caption,
            attachment_type=attachment_type,
            attachment_file_id=file_id,
            send_at=send_at_iso
        )
        await bot.send_message(user_id, f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {send_time_str}. üíå")
