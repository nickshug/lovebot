from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime

from src.db import database as db
from src.states.user_states import Settings
from src.keyboards.inline import get_settings_kb

router = Router()


async def get_couple_id(user_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–∞—Ä—ã."""
    partner = await db.get_partner(user_id)
    if not partner:
        return None
    # ID –ø–∞—Ä—ã - —ç—Ç–æ –º–µ–Ω—å—à–∏–π –∏–∑ ID –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —á—Ç–æ–±—ã –±—ã–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º
    return min(user_id, partner['user_id'])


async def show_settings_menu(message: types.Message, couple_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    settings = await db.get_couple_settings(couple_id)
    await message.answer(
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–π –ø–∞—Ä—ã:</b>",
        reply_markup=get_settings_kb(settings)
    )


@router.message(Command("settings"))
async def cmd_settings(message: types.Message, state: FSMContext):
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    if not couple_id:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")
        return
    await show_settings_menu(message, couple_id)


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö ---

@router.callback_query(F.data == "settings_enable")
async def process_reminders_enable(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Settings.waiting_for_reminder_time)
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –¥–µ–Ω—å? (—É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")


@router.callback_query(F.data == "settings_disable")
async def process_reminders_disable(callback: types.CallbackQuery):
    couple_id = await get_couple_id(callback.from_user.id)
    settings = await db.get_couple_settings(couple_id)
    await db.update_reminders_settings(couple_id, reminders_enabled=False)
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤—ã–∫–ª—é—á–µ–Ω—ã üîï")
    new_settings = await db.get_couple_settings(couple_id)
    await callback.message.edit_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–π –ø–∞—Ä—ã:</b>", reply_markup=get_settings_kb(new_settings))


@router.callback_query(F.data == "settings_changetime")
async def process_reminders_change_time(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Settings.waiting_for_reminder_time)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú).")


@router.message(Settings.waiting_for_reminder_time, F.text)
async def process_reminder_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        return

    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    await db.update_reminders_settings(couple_id, reminders_enabled=True, reminder_time=message.text)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {message.text}.")
    await show_settings_menu(message, couple_id)


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ "–í–æ–ø—Ä–æ—Å–∞ –¥–Ω—è" ---

@router.callback_query(F.data == "settings_qotd_enable")
async def process_qotd_enable(callback: types.CallbackQuery, state: FSMContext):
    couple_id = await get_couple_id(callback.from_user.id)
    await db.update_reminders_settings(couple_id, qotd_enabled=True)
    await callback.answer("–í–æ–ø—Ä–æ—Å –¥–Ω—è –≤–∫–ª—é—á–µ–Ω üîî")
    new_settings = await db.get_couple_settings(couple_id)
    await callback.message.edit_reply_markup(reply_markup=get_settings_kb(new_settings))


@router.callback_query(F.data == "settings_qotd_disable")
async def process_qotd_disable(callback: types.CallbackQuery):
    couple_id = await get_couple_id(callback.from_user.id)
    await db.update_reminders_settings(couple_id, qotd_enabled=False)
    await callback.answer("–í–æ–ø—Ä–æ—Å –¥–Ω—è –≤—ã–∫–ª—é—á–µ–Ω üîï")
    new_settings = await db.get_couple_settings(couple_id)
    await callback.message.edit_reply_markup(reply_markup=get_settings_kb(new_settings))


@router.callback_query(F.data == "settings_qotd_changetime")
async def process_qotd_change_time(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Settings.waiting_for_qotd_send_time)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00).")


@router.message(Settings.waiting_for_qotd_send_time, F.text)
async def process_qotd_send_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        return
    await state.update_data(qotd_send_time=message.text)
    await state.set_state(Settings.waiting_for_qotd_summary_time)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00).")


@router.message(Settings.waiting_for_qotd_summary_time, F.text)
async def process_qotd_summary_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        return

    data = await state.get_data()
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    await db.update_reminders_settings(
        couple_id,
        qotd_enabled=True,
        qotd_send_time=data['qotd_send_time'],
        qotd_summary_time=message.text
    )
    await message.answer("–í—Ä–µ–º—è –¥–ª—è '–í–æ–ø—Ä–æ—Å–∞ –¥–Ω—è' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await show_settings_menu(message, couple_id)
