import logging
import random
import aiohttp
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.config import TMDB_API_KEY
from src.db import database as db
from src.states.user_states import Movie
from src.keyboards.inline import get_movie_genre_kb, get_movie_suggestion_kb, get_delete_movie_kb

router = Router()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API TMDb ---
TMDB_GENRE_MAP = {
    "comedy": 35, "romance": 10749, "scifi": 878, "thriller": 53
}
TMDB_IMG_BASE_URL = "https://image.tmdb.org/t/p/w500"


async def get_couple_id(user_id: int):
    partner = await db.get_partner(user_id)
    return min(user_id, partner['user_id']) if partner else None


async def get_random_movie_from_api(genre_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É –∏–∑ TMDb API."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –ø–µ—Ä–≤—ã—Ö 20 (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏—à–µ–≤—ã–µ —Ñ–∏–ª—å–º—ã)
    random_page = random.randint(1, 20)
    url = f"https://api.themoviedb.org/3/discover/movie?api_key={TMDB_API_KEY}&with_genres={genre_id}&language=ru-RU&sort_by=popularity.desc&page={random_page}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data['results']:
                    return random.choice(data['results'])
    return None


# --- –ö–∏–Ω–æ—Ä—É–ª–µ—Ç–∫–∞ ---

@router.message(Command("movie"))
async def cmd_movie(message: types.Message, state: FSMContext):
    await state.clear()
    if not await get_couple_id(message.from_user.id):
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")

    await state.set_state(Movie.choosing_genre)
    await message.answer("–ö–∞–∫–æ–π –∂–∞–Ω—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º?", reply_markup=get_movie_genre_kb())


async def show_random_movie(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    genre = data.get('current_genre')
    if not genre: return

    genre_id = TMDB_GENRE_MAP.get(genre)
    movie = await get_random_movie_from_api(genre_id)

    if not movie or not movie.get('poster_path'):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return

    await state.update_data(current_movie=movie)

    poster_url = f"{TMDB_IMG_BASE_URL}{movie['poster_path']}"
    caption = f"<b>{movie['title']}</b>\n\n{movie['overview']}"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await callback.message.answer_photo(
            photo=poster_url,
            caption=caption,
            reply_markup=get_movie_suggestion_kb()
        )
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∂–∞–Ω—Ä–æ–≤
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä, –Ω–æ –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ:")
        await callback.message.answer(caption, reply_markup=get_movie_suggestion_kb())


@router.callback_query(Movie.choosing_genre, F.data.startswith("movie_genre_"))
async def process_genre_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ò—â—É —Ñ–∏–ª—å–º –¥–ª—è –≤–∞—Å...")
    genre = callback.data.split("_")[-1]
    await state.update_data(current_genre=genre)
    await show_random_movie(callback, state)


@router.callback_query(Movie.choosing_genre, F.data == "movie_another")
async def process_another_movie(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ò—â–µ–º –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...")
    await callback.message.delete()
    await show_random_movie(callback, state)


@router.callback_query(Movie.choosing_genre, F.data == "movie_add_watchlist")
async def process_add_to_watchlist(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    movie = data.get('current_movie')
    if not movie: return

    couple_id = await get_couple_id(callback.from_user.id)
    success = await db.add_movie_to_watchlist(couple_id, movie['title'])

    if success:
        await callback.answer(f"'{movie['title']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!", show_alert=True)
    else:
        await callback.answer(f"'{movie['title']}' —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", show_alert=True)


@router.callback_query(Movie.choosing_genre, F.data == "movie_lets_watch")
async def process_lets_watch(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    movie = data.get('current_movie')
    if not movie: return

    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ '<b>{movie['title']}</b>'.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üçø")

    partner = await db.get_partner(callback.from_user.id)
    try:
        await callback.bot.send_message(
            partner['user_id'],
            f"üîî {callback.from_user.username} –≤—ã–±—Ä–∞–ª(–∞) —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä: '<b>{movie['title']}</b>'.\n\n–ì–æ—Ç–æ–≤—å—Ç–µ –ø–æ–ø–∫–æ—Ä–Ω! üòâ"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å–º–∞: {e}")


# --- –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---

@router.message(Command("addmovie"))
async def cmd_addmovie(message: types.Message, state: FSMContext):
    await state.clear()
    if not await get_couple_id(message.from_user.id):
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")

    await state.set_state(Movie.waiting_for_movie_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")


@router.message(Movie.waiting_for_movie_title, F.text)
async def process_add_movie_title(message: types.Message, state: FSMContext):
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    success = await db.add_movie_to_watchlist(couple_id, message.text)

    if success:
        await message.answer(f"–§–∏–ª—å–º '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
    else:
        await message.answer(f"–§–∏–ª—å–º '{message.text}' —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")


@router.message(Command("watchlist"))
async def cmd_watchlist(message: types.Message, state: FSMContext):
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    if not couple_id:
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")

    watchlist = await db.get_movie_watchlist(couple_id)
    if not watchlist:
        return await message.answer(
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å –ø–æ–º–æ—â—å—é /movie –∏–ª–∏ /addmovie.")

    text = "<b>üé¨ –í–∞—à —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n\n"
    for i, movie in enumerate(watchlist, 1):
        text += f"{i}. {movie['title']}\n"

    await message.answer(text)


@router.message(Command("delmovie"))
async def cmd_delmovie(message: types.Message, state: FSMContext):
    await state.clear()
    couple_id = await get_couple_id(message.from_user.id)
    if not couple_id:
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")

    watchlist = await db.get_movie_watchlist(couple_id)
    if not watchlist:
        return await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")

    await message.answer(
        "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞?",
        reply_markup=get_delete_movie_kb(watchlist)
    )


@router.callback_query(F.data.startswith("del_movie_"))
async def process_del_movie(callback: types.CallbackQuery):
    movie_id = int(callback.data.split("_")[-1])
    couple_id = await get_couple_id(callback.from_user.id)

    await db.delete_movie_from_watchlist(movie_id, couple_id)
    await callback.answer("–§–∏–ª—å–º —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", show_alert=True)

    watchlist = await db.get_movie_watchlist(couple_id)
    if not watchlist:
        await callback.message.edit_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.")
    else:
        await callback.message.edit_text(
            "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞?",
            reply_markup=get_delete_movie_kb(watchlist)
        )


@router.callback_query(F.data.startswith("movie_page_"))
async def process_movie_page(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[-1])
    couple_id = await get_couple_id(callback.from_user.id)
    watchlist = await db.get_movie_watchlist(couple_id)
    await callback.message.edit_reply_markup(reply_markup=get_delete_movie_kb(watchlist, page))
