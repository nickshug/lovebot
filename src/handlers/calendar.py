import logging
from datetime import datetime, timedelta
import pytz
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from itertools import groupby

from src.db import database as db
from src.states.user_states import Calendar
from src.keyboards.inline import get_events_period_kb, get_skip_details_kb, get_date_selection_kb, get_delete_event_kb

router = Router()

WEEKDAYS_RU = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}


@router.message(Command("addevent"))
async def cmd_addevent(message: types.Message, state: FSMContext):
    await state.clear()
    user_data = await db.get_user(message.from_user.id)
    if not user_data or not user_data['partner_id']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")
        return

    await state.set_state(Calendar.waiting_for_event_date)
    await message.answer(
        "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ? –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é (–î–î.–ú–ú.–ì–ì–ì–ì).",
        reply_markup=get_date_selection_kb()
    )


@router.callback_query(Calendar.waiting_for_event_date, F.data.startswith("date_"))
async def process_event_date_button(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    date_choice = callback.data.split("_")[1]
    send_date = None
    if date_choice == "today":
        send_date = datetime.now().date()
    elif date_choice == "tomorrow":
        send_date = (datetime.now() + timedelta(days=1)).date()

    await state.update_data(event_date=send_date)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
    await state.set_state(Calendar.waiting_for_event_time)


@router.message(Calendar.waiting_for_event_date, F.text)
async def process_event_date_text(message: types.Message, state: FSMContext):
    try:
        send_date = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    if send_date < datetime.now().date():
        await message.answer("–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º!")
        return
    await state.update_data(event_date=send_date)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
    await state.set_state(Calendar.waiting_for_event_time)


@router.message(Calendar.waiting_for_event_time, F.text)
async def process_event_time(message: types.Message, state: FSMContext):
    try:
        user_time = datetime.strptime(message.text, "%H:%M").time()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        return

    data = await state.get_data()
    event_date = data.get('event_date')

    naive_event_datetime = datetime.combine(event_date, user_time)

    moscow_tz = pytz.timezone("Europe/Moscow")
    aware_event_datetime = moscow_tz.localize(naive_event_datetime)
    now_aware = datetime.now(moscow_tz)

    if aware_event_datetime < now_aware:
        await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
        return

    await state.update_data(event_time=user_time)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ').")
    await state.set_state(Calendar.waiting_for_event_title)


@router.message(Calendar.waiting_for_event_title, F.text)
async def process_event_title(message: types.Message, state: FSMContext):
    await state.update_data(event_title=message.text)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞'). –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ.",
        reply_markup=get_skip_details_kb())
    await state.set_state(Calendar.waiting_for_event_details)


async def finalize_event_creation(user_id: int, bot: Bot, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    user = await db.get_user(user_id)
    partner = await db.get_partner(user_id)

    event_date = data['event_date']
    event_time = data['event_time']
    event_title = data['event_title']
    event_details = data.get('event_details')

    full_event_date = datetime.combine(event_date, event_time)

    couple_id = min(user_id, partner['user_id'])

    await db.add_event(couple_id, full_event_date, event_title, event_details)

    event_date_str = full_event_date.strftime('%d.%m.%Y –≤ %H:%M')
    await bot.send_message(user_id, f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event_date_str} - {event_title}")

    try:
        await bot.send_message(
            partner['user_id'],
            f"üîî {user['username']} –¥–æ–±–∞–≤–∏–ª(–∞) –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_date_str} - {event_title}"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {partner['user_id']} –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏: {e}")


@router.message(Calendar.waiting_for_event_details, F.text)
async def process_event_details(message: types.Message, state: FSMContext):
    await state.update_data(event_details=message.text)
    await finalize_event_creation(message.from_user.id, message.bot, state)


@router.callback_query(Calendar.waiting_for_event_details, F.data == "skip_details")
async def process_skip_details(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await finalize_event_creation(callback.from_user.id, callback.bot, state)


@router.message(Command("events"))
async def cmd_events(message: types.Message, state: FSMContext):
    await state.clear()
    user_data = await db.get_user(message.from_user.id)
    if not user_data or not user_data['partner_id']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")
        return
    await message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è?", reply_markup=get_events_period_kb())


@router.callback_query(F.data.startswith("events_"))
async def process_events_period(callback: types.CallbackQuery):
    period = callback.data.split("_")[1]
    user_id = callback.from_user.id
    partner = await db.get_partner(user_id)
    couple_id = min(user_id, partner['user_id'])

    now = datetime.now()
    start_date = now
    end_date = None
    title = ""

    if period == "today":
        end_date = start_date.replace(hour=23, minute=59, second=59)
        title = "–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"
    elif period == "week":
        end_date = start_date + timedelta(days=7)
        title = "–ü–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:"
    elif period == "month":
        end_date = start_date + timedelta(days=30)
        title = "–ü–ª–∞–Ω—ã –Ω–∞ –º–µ—Å—è—Ü:"
    elif period == "all":
        end_date = start_date + timedelta(days=365 * 5)
        title = "–í—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–ª–∞–Ω—ã:"

    events = await db.get_events_for_period(couple_id, start_date, end_date)

    if not events:
        await callback.answer()
        await callback.message.edit_text(
            "–ù–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç. üòï\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /addevent.",
            reply_markup=get_events_period_kb()
        )
        return

    response_text = f"<b>{title}</b>\n\n"

    key_func = lambda e: datetime.fromisoformat(e['event_date']).date()

    for event_date, daily_events in groupby(events, key=key_func):
        day_of_week_en = event_date.strftime("%A")
        day_of_week_ru = WEEKDAYS_RU.get(day_of_week_en, day_of_week_en)
        day_str = event_date.strftime(f"{day_of_week_ru}, %d.%m")
        response_text += f"‚Äî‚Äî‚Äî‚Äî‚Äî <b>{day_str}</b> ‚Äî‚Äî‚Äî‚Äî‚Äî\n"

        for event in daily_events:
            event_datetime = datetime.fromisoformat(event['event_date'])
            time_str = event_datetime.strftime("%H:%M")
            response_text += f"    {time_str} - {event['title']}\n"
            if event['details']:
                response_text += f"         <i>‚îî {event['details']}</i>\n"
        response_text += "\n"

    response_text += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delevent."
    await callback.message.edit_text(response_text)


@router.message(Command("delevent"))
async def cmd_delevent(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    partner = await db.get_partner(user_id)
    if not partner:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä.")
        return

    couple_id = min(user_id, partner['user_id'])
    now = datetime.now()
    events = await db.get_events_for_period(couple_id, now, now + timedelta(days=365 * 5))

    if not events:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    await message.answer(
        "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
        reply_markup=get_delete_event_kb(events)
    )


@router.callback_query(F.data.startswith("del_event_"))
async def process_del_event(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[-1])

    user_id = callback.from_user.id
    partner = await db.get_partner(user_id)
    couple_id = min(user_id, partner['user_id'])
    event = await db.get_event_by_id(event_id, couple_id)

    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
        await callback.message.delete()
        return

    await db.delete_event_by_id(event_id)
    await callback.message.edit_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event['title']}' —É–¥–∞–ª–µ–Ω–æ.")

    try:
        await callback.bot.send_message(
            partner['user_id'],
            f"üîî {callback.from_user.username} —É–¥–∞–ª–∏–ª(–∞) —Å–æ–±—ã—Ç–∏–µ: '{event['title']}'"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")


@router.callback_query(F.data.startswith("event_page_"))
async def process_event_page(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    partner = await db.get_partner(user_id)
    couple_id = min(user_id, partner['user_id'])
    now = datetime.now()
    events = await db.get_events_for_period(couple_id, now, now + timedelta(days=365 * 5))

    await callback.message.edit_reply_markup(reply_markup=get_delete_event_kb(events, page))
